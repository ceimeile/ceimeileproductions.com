{"version":3,"sources":["components/mailing-list/MailingListResult.tsx","components/mailing-list/MailingListInput.tsx","components/Banner/Banner.tsx","containers/home/Home.tsx","containers/about/About.tsx","containers/team/Team.tsx","containers/artists/Artists.tsx","containers/work-with-us/WorkWithUs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SuccessProps","title","extra","undefined","ErrorProps","subTitle","type","key","onClick","window","location","reload","props","resultProps","resultType","status","Title","Typography","React","useState","submitted","setSubmitted","setResultType","Search","Input","level","className","MailingListResult","placeholder","enterButton","size","name","id","loading","onSearch","value","jsonp","param","err","data","msg","includes","span","offset","Banner","MailingListInput","Content","Layout","Footer","Sider","SubMenu","Menu","withRouter","collapsed","setCollapsed","style","minHeight","collapsible","onCollapse","theme","defaultSelectedKeys","mode","Item","to","HomeOutlined","ContactsOutlined","TeamOutlined","UserOutlined","BulbOutlined","margin","exact","path","component","Home","About","Team","Artists","WorkWithUs","textAlign","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c9fa290.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Result, Button } from \"antd\";\r\n\r\nconst SuccessProps = {\r\n  title: \"Thanks for joining our mailing list!\",\r\n  extra: undefined\r\n};\r\n\r\nconst ErrorProps = {\r\n  title: \"Oops, something went wrong.\",\r\n  subTitle: \"Please refresh and try again.\",\r\n  extra: (\r\n    <Button\r\n      type=\"primary\"\r\n      key=\"refresh\"\r\n      onClick={() => window.location.reload()}\r\n    >\r\n      Try again\r\n    </Button>\r\n  )\r\n};\r\n\r\nexport default (props: { resultType?: \"success\" | \"error\" }) => {\r\n  let resultProps = props.resultType === \"success\" ? SuccessProps : ErrorProps;\r\n  return (\r\n    <>\r\n      <Result\r\n        status={props.resultType}\r\n        title={resultProps.title}\r\n        extra={[resultProps.extra]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"antd\";\r\nimport MailingListResult from \"./MailingListResult\";\r\nimport jsonp from \"jsonp\";\r\nimport { Typography } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nexport default () => {\r\n  const [submitted, setSubmitted] = React.useState<boolean>(false);\r\n  const [resultType, setResultType] = React.useState<\"success\" | \"error\">();\r\n\r\n  const onSubmit = (value: string) => {\r\n    jsonp(\r\n      `https://ceimeileproductions.us19.list-manage.com/subscribe/post-json?u=0ebc7eec90e214ebdcfe9117a&amp;id=4d02528246&EMAIL=${value}`,\r\n      { param: \"c\" },\r\n      (err, data) => {\r\n        setSubmitted(true);\r\n        if (\r\n          data.msg.includes(\r\n            \"already subscribed\" || data.status !== \"success\" || err\r\n          )\r\n        ) {\r\n          setResultType(\"error\");\r\n        } else {\r\n          setResultType(\"success\");\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const { Search } = Input;\r\n  return (\r\n    <>\r\n      <Title level={3} className=\"mailing-list-text\">Join our mailing list!</Title>\r\n      {!submitted ? (\r\n        <Search\r\n          placeholder=\"Email address\"\r\n          enterButton=\"Join\"\r\n          size=\"large\"\r\n          type=\"email\"\r\n          name=\"EMAIL\"\r\n          id=\"mce-EMAIL\"\r\n          loading={submitted}\r\n          onSearch={onSubmit}\r\n        />\r\n      ) : (\r\n          <MailingListResult key={resultType} resultType={resultType} />\r\n        )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Col, Row, Typography } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nexport default () => {\r\n    return (\r\n        <>\r\n            <Row className=\"tagline-row\">\r\n                <Col span={12}>\r\n                    <Title className=\"tagline-col-text\" level={2}>NEW THEATRE.</Title>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Title className=\"tagline-col-text\" level={2}>NEW EXPERIENCES.</Title>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={8} offset={8}>\r\n                    <Title className=\"coming-soon-text\" level={3}>coming soon</Title>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport MailingListInput from \"../../components/mailing-list/MailingListInput\";\r\nimport Banner from \"../../components/Banner/Banner\";\r\nimport { Col, Row } from \"antd\";\r\nimport \"./Home.css\"\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <Banner />\r\n      <Row>\r\n        <Col span={8} offset={8}>\r\n          <MailingListInput />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <h1>About</h1>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <h1>Team</h1>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <h1>Artists</h1>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <h1>Work with us</h1>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Link, withRouter } from \"react-router-dom\";\r\nimport Home from \"./containers/home/Home\";\r\nimport About from \"./containers/about/About\";\r\nimport Team from \"./containers/team/Team\";\r\nimport Artists from \"./containers/artists/Artists\";\r\nimport WorkWithUs from \"./containers/work-with-us/WorkWithUs\";\r\nimport { Layout, Menu, Typography } from \"antd\";\r\nimport {\r\n  TeamOutlined,\r\n  HomeOutlined,\r\n  ContactsOutlined,\r\n  UserOutlined,\r\n  BulbOutlined\r\n} from \"@ant-design/icons\";\r\nimport \"./App.css\";\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  const [collapsed, setCollapsed] = React.useState<boolean>(false);\r\n\r\n  const onCollapse = (collapsed: boolean) => {\r\n    setCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\" }}>\r\n      <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n        <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n          <Menu.Item key=\"1\">\r\n            <Link to=\"/\">\r\n              <HomeOutlined />\r\n              <span>Home</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <SubMenu\r\n            key=\"sub2\"\r\n            title={\r\n              <Link to=\"/about\">\r\n                <span>\r\n                  <ContactsOutlined />\r\n                  <span>About Us</span>\r\n                </span>\r\n              </Link>\r\n            }\r\n          >\r\n            <Menu.Item key=\"6\">\r\n              <Link to=\"/team\">\r\n                <span>\r\n                  <TeamOutlined />\r\n                  <span>Team Céim Eile</span>\r\n                </span>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"8\">\r\n              <Link to=\"/artists\">\r\n                <span>\r\n                  <UserOutlined />\r\n                  <span>Associate Artists</span>\r\n                </span>\r\n              </Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"9\">\r\n            <Link to=\"/work-with-us\">\r\n              <BulbOutlined />\r\n              <span>Work with us</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Content style={{ margin: \"10px 16px\" }}>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/team\" component={Team} />\r\n          <Route path=\"/artists\" component={Artists} />\r\n          <Route path=\"/work-with-us\" component={WorkWithUs} />\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          Céim Eile Productions © 2020\r\n        </Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}